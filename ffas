#!/usr/bin/env python

import re
import struct
import sys

class SyntaxError(Exception):
    def __init__(self, msg): self.msg = msg

class State(object):
    def __init__(self):
        self.words = {}
        self.stack = []
        self.ip = 0
        self.h = 0
        self.slot = 4
        self.img = [0] * 128 # ram and rom
    def push(self, val): self.stack.append(val)
    def pop(self): return self.stack.pop()
s = State()

def mkop(name, code):
    s.words[name] = lambda: asm_op(name, code)

mkop("ex", 1); mkop("@p", 8); mkop("@+", 9); mkop("@b", 10); mkop("@", 11)
mkop("!p", 12); mkop("!+", 13); mkop("!b", 14); mkop("!", 15); mkop("+*", 16)
mkop("2*", 17); mkop("2/", 18); mkop("-", 19); mkop("+", 20); mkop("and", 21)
mkop("or", 22); mkop("drop", 23); mkop("dup", 24); mkop("pop", 25)
mkop("over", 26); mkop("a", 27); mkop(".", 28); mkop("push", 29); mkop("b!", 30)
mkop("a!", 31)
mkop(";", 0) # TODO tail call optimization
def asm_jump(): asm_op("jump", 2)
def asm_call(): asm_op("call", 3)
def asm_unext(): asm_op("unext", 4)
def asm_next(): asm_op("next", 5)
def asm_if(): asm_op("if", 6)
def asm_nif(): asm_op("-if", 7)

def word(name = None):
    def decorate(f):
        s.words[name if name else f.__name__] = f
        def wrapper(*a, **kw):
            f(*a, **kw)
        return wrapper
    return decorate

def iword(name):
    try: s.words[name]()
    except KeyError: raise SyntaxError("unknown word: %s" % name)

def org(a):
    align()
    s.ip = a
    s.h = a
    s.slot = 4

@word()
def rom(): org(0x80)
@word()
def ram(): org(0x00)
@word()
def boot(): org(0xaa)

@word("if")
def if_():
    asm_if()
    s.push((s.ip << 2) | s.slot)
    finish_op()
@word("-if")
def nif_():
    asm_nif()
    s.push((s.ip << 2) | s.slot)
    finish_op()
@word()
def zif():
    asm_next()
    s.push((s.ip << 2) | s.slot)
    finish_op()
@word()
def ahead():
    asm_jump()
    s.push((s.ip << 2) | s.slot)
    finish_op()
@word()
def leap():
    asm_call()
    s.push((s.ip << 2) | s.slot)
    finish_op()

masks = [0, 0x3ff, 0xff, 0x7]

@word()
def then():
    align()
    patch = s.pop()
    slot = patch & 0x3
    patch >>= 2
    if patch & ~masks[slot] != s.ip & ~masks[slot]:
        raise SyntaxError("forward jump out of range: %x from %x in slot %d"
            % (s.ip, patch, slot))
    s.img[idx(patch)] &= ~masks[slot]
    s.img[idx(patch)] |= s.ip & masks[slot]

@word("for")
def for_():
    iword('push')
    align()
    s.push(s.ip)

@word()
def next():
    dest = s.pop()
    asm_next()
    # TODO check range and align if necessary
    if dest & ~masks[s.slot] != s.ip & ~masks[s.slot]:
        raise SyntaxError("backward jump out of range: %x to %x in slot %d"
            % (s.ip, dest, s.slot))
    ip = s.ip
    slot = s.slot
    finish_op()
    s.img[idx(ip)] &= ~masks[slot]
    s.img[idx(ip)] |= dest & masks[slot]

@word()
def unext():
    asm_unext()
    s.pop()

hex_re = re.compile('0x[0-9A-Fa-f]+$')
dec_re = re.compile('-?[0-9]+$')

def idx(a):
    a &= 0x1ff
    if a < 0x080:
        return a & 0x3f
    if a < 0x100:
        return 64 + (a & 0x3f)
    raise SyntaxError("invalid address: %d" % a)

def inc(a):
    if a & 0x100: return
    l7 = (a+1) & 0x7f
    return (a & ~0x7f) | l7

def finish_op():
    s.img[idx(s.ip)] ^= 0x15555
    s.ip = s.h
    s.h = inc(s.h)
    s.slot = 0

@word('..')
def align():
    if s.slot == 0: return
    while s.slot < 4: iword('.')
    finish_op()

def asm_lit(val):
    iword('@p')
    s.img[idx(s.h)] = val
    s.h = inc(s.h)

rshifts = [0, 0, 0, 2]
lshifts = [13, 8, 3, 0]

def asm_op(name, op):
    if s.slot == 4: finish_op()
    if s.slot == 3 and op & 3:
        align()
    if s.slot == 0: s.img[idx(s.ip)] = 0
    s.img[idx(s.ip)] |= ((op >> rshifts[s.slot]) << lshifts[s.slot])
    s.slot += 1

def asm_line(line):
    for tok in line.split():
        if hex_re.match(tok):
            asm_lit(int(tok, 16))
        elif dec_re.match(tok):
            asm_lit(int(tok, 10))
        else:
            iword(tok)

def emit(f):
    for w in s.img: f.write(struct.pack('>L', w))

def main():
    if len(sys.argv) == 3:
        input_filename = sys.argv[1]
        output_filename = sys.argv[2]
    else:
        print "usage: fasm <input.asm> <output.img>"
        sys.exit(1)

    with open(input_filename) as f:
        for lineno, line in enumerate(f):
            try: asm_line(line)
            except SyntaxError as e: 
                print ("Syntax error on line %d: %s" % (lineno+1, e.msg))
                sys.exit(1)

    align()
    with open(output_filename, "wb") as f: emit(f)

if __name__ == '__main__': main()
